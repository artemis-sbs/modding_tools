shared item_name = ""
shared item_icon = ""
shared item_roles = ""
shared item_color = ""
shared item_scale = 1.0
shared items = {}
shared ship_type = "tsn_light_cruiser"
shared last_ship_type = "tsn_light_cruiser"
shared colors =  ["black", "white", "gray", "silver", "maroon", "red", "purple", "fushsia", "green", "lime", "olive", "yellow", "navy", "blue", "teal",  "aqua"]
shared selection_go = None
shared pos_x = None
shared pos_y = None
shared icons = [*range(147)]

========== editor_tools ============

    if grid_data.get(ship_type) is None:
        grid_data[ship_type] = {"grid_objects":[]}

    shared internal_items = grid_data[ship_type]["grid_objects"]
    if last_ship_type != ship_type:
        #
        # For now create a new ship
        #
        shared selection_go=None
        shared pos_x = None
        shared pos_y = None
    
        await task_schedule(rebuild_grid_items)

    gui_activate_console("engineer")


    with content:

        with gui_sub_section() as a:
            gui_row()    
            t = []
            for key in sorted(templates.keys(), key=lambda x: x.lower()):
                t.append(MastDataObject(templates[key]))

            title = "text:Template;justify:center;"
            ts = "row-height: 1.5em;background:#1578;"
            template_picker = gui_list_box(t,"row-height: 0.4em; background:#1572;margin:0, 1em;", item_template=history_item_template, title_template=title, title_section_style= ts, select=True)
            
            

        with gui_sub_section() as a:
            sel_grid_items = []
            l = len(items)
            for go_id in items:
                go = items[go_id]
                item = go.get("item")
                if item is None:
                    continue

                x = item["x"]
                y = item["y"]
                if x == pos_x and y == pos_y:
                    add_item = item | {"id": go_id}
                    sel_grid_items.append(MastDataObject(add_item))

            title = "text:Grid Items;justify:center;"
            ts = "row-height: 1.5em;background:#1578;"
            
            grid_picker = gui_list_box(sel_grid_items,"row-height: 0.4em; background:#1572;margin:1em, 1em;", item_template=history_item_template, title_template=title, title_section_style= ts, multi=True)
            grid_sel = grid_picker.get_selected()
            if len(grid_sel)==0:
                if len(sel_grid_items)>0:
                    grid_picker.set_selected_index(0)

            gui_row("row-height: 10em")
            with gui_sub_section() as b:
                gui_row("row-height: 1.1em")
                gui_text("Name")
                gui_row("row-height: 2em")
                name_input = gui_input("desc:Name;", var="item_name")

                gui_row("row-height: 1.1em")
                gui_text("Roles")
                gui_row("row-height: 2em")
                roles_input = gui_input("desc:Roles;", var="item_roles")
                gui_row("row-height: 0.5em")
                gui_blank()
                gui_row("row-height: 2em")
                update_selection = gui_button("Update", "padding: 5px,7px,5px,0;")

            gui_row("row-height: 5em")
            with gui_sub_section() as b:
                gui_row("row-height: 0.5em")
                gui_blank()
                gui_row("row-height: 2em;padding: 5px,5px,5px, 0;")
                delete_selection = gui_button("Delete")
                gui_row("row-height: 2em;padding: 5px,5px,5px,5px;")
                clear_selection = gui_button("Deselection")
                
    on gui_message(clear_selection):
        if selection_go is not None:
            sbs.delete_grid_object(artemis, to_id(selection_go))
            selection_go = None
            set_grid_selection(artemis, 0)
            grid_picker.items = []
            gui_represent(grid_picker)

    on gui_message(delete_selection):
        sel = grid_picker.get_selected()
        for go in sel:
            # Remove from grid_data file data
            internal = items.get(go.id)
            if internal is not None:
                sbs.delete_grid_object(artemis, go.id)
                item = internal.get("item")
                if item is not None:
                    internal_items.remove(item)
                # remove from items
                items.pop(go.id, None)
            # This could be more optimized?
            #gui_represent(grid_picker)
            gui_reroute_server(grid_editor_client_start)

    on gui_message(update_selection):
        sel = grid_picker.get_selected()
        for go in sel:
            # Remove from grid_data file data
            internal = items.get(go.id)
            if internal is not None:
                item = internal.get("item")
                if item is not None:
                    print("GOT ITEM")
                    item["name"] = item_name
                    item["roles"] = item_roles.replace(' ',"")
                    # Do I need to rebuild?
                    theme_data = get_theme_data(item, current_grid_theme)
                    icon = theme_data.get("icon", 0)
                    scale = theme_data.get("scale", 1.0)
                    color = theme_data.get("color", 0)

                    obj = to_object(go.id)
                    if obj is not None:
                        obj.data_set.set("name", item_name, 0)
                        obj.data_set.set("icon_index", icon, 0)
                        obj.data_set.set("icon_color", color, 0)
                        obj.data_set.set("icon_scale", scale, 0)

                # This could be more optimized?
                #gui_represent(grid_picker)
                gui_reroute_server(grid_editor_client_start)
        
    

    # if len(grid_sel)>=1:
    #     gui_show(b)
    #     gui_show(b)
    # else:
    #     gui_hide(b)
    #     gui_hide(b)

    
    on change grid_picker.value:
        sel = grid_picker.value

    on change template_picker.value:
        item = template_picker.value
        item_name = item.name
        item_roles = item.roles
        name_input.value =item_name
        roles_input.value =item_roles
        gui_represent(name_input)
        gui_represent(roles_input)
        


========== show_hull_grid  ============
    data = ship_data_get_ship_data_for(ship_type)
    _text = "None"
    if data is not None:
        name = data.get("name", "")
        side = data.get("side", "")
        #_text = """$t Test {_name}\n\n{_desc}."""
        _text = """{side} {name}"""

    with gui_sub_section() as internal:
        gui_row("row-height:40px;")
        gui_text(_text, "justify:center;font:gui-5;")
        gui_row()
        gui_layout_widget("ship_internal_view")

    jump finish_layout


##route_focus_grid("watch_sel")
//focus/grid if menu==PANE_EDITOR

    #
    # This watches for anytime the selection changes 
    # in parallel with the await comms
    #
    ->END if GRID_SELECTED_ID is None
    item = items.get(GRID_SELECTED_ID)
    ->END if item is None

    if selection_go is not None:
        # set pos
        blob = to_blob(GRID_SELECTED_ID)
        x = blob.get("curx", 0)
        y = blob.get("cury", 0)
        pos_x = x
        pos_y = y
        selection_go.blob.set("curx", x)
        selection_go.blob.set("cury", y)
    else:
        #create it
        blob = to_blob(GRID_SELECTED_ID)
        x = blob.get("curx", 0)
        y = blob.get("cury", 0)
        pos_x = x
        pos_y = y
        shared selection_go =  grid_spawn(artemis,  "selection", "#,sel1", x, y, 101, "#aaa4", "#")
        #print (selection_go)
        selection_go.blob.set("icon_scale",  1.5)


    item = item["item"]

    index = items[GRID_SELECTED_ID]["index"]
    go = to_object(GRID_SELECTED_ID)
    #
    # Change the GUI form to these values
    #
    item_name = item["name"]
    item_roles = item["roles"]

    #item_scale = item["scale"]
    # Set the selection of the icons
    #item_icon.content.selected = set()
    #item_icon.content.selected.add(item["icon"])

    # set selection for color
    #color = colors.index(item["color"])
    color = "white"
    #item_color.content.selected = set()
    #item_color.content.selected.add(color)

    gui_reroute_server(grid_editor_client_start)

    ->END

//point/grid if menu==PANE_EDITOR

    shared pos_x = EVENT.source_point.x 
    shared pos_y = EVENT.source_point.y
    

    # sel_grid_items = []
    # for item in internal_items:
    #     x = item["x"]
    #     y = item["y"]
    #     if x == pos_x and y == pos_y:
    #         sel_grid_items.append(MastDataObject(item))
    
    # grid_picker.items = sel_grid_items
    # gui_represent(grid_picker)
    #
    # Check if this is a selection not an add
    #
    for g_id in items:
        item = items.get(g_id)
        ->END if item is None
    
        item = item.get("item")
        ->END if item is None
        
        if item["x"] == pos_x and item["y"] == pos_y:
            # Found existing item
            COMMS_SELECTED_ID = g_id
            jump update_selection

--- add_grid_object_common 


    #print (f"{item_name} {item_roles} '{item_color}' '{item_icon}'")
    #print(f"{pos_x} {pos_y}")
    #
    # Add needs to have the values: e.g. name, roles
    #
    ->END if item_name is None or item_name == ""
    ->END if item_roles is None or item_roles == ""
    # ->END if pos_x is None or pos_y is None


    #print("Update1")
    theme_item = {"name": item_name, "roles": item_roles}
    theme_data = get_theme_data(theme_item, current_grid_theme)
    #
    #
    icon = theme_data.get("icon", 0)
    scale = theme_data.get("scale", 1.0)
    color = theme_data.get("color", 0)

    g = ~~ {
        "x": pos_x, 
        "y":pos_y, 
        "name":item_name, 
        "roles": item_roles
    }~~
    i = len(internal_items)
    go =  grid_spawn(artemis,  g["name"], f"gol:{i}", g["x"], g["y"], icon, color, g["roles"])
    #->END if go is None

    go.blob.set("icon_scale", scale, 0)
    blob = to_blob(artemis)
    # blob.set("grid_selected_UID", go.id, 0)
    gid = go.id
    follow_route_select_grid(artemis, gid)

    items[go.id] = {"index": i, "go": go, "item": g}

    ##### Templates aren't created
    ##### ~~templates[g['name']] = g~~
    internal_items.append(g) 
    # await task_schedule(save_data)
    COMMS_SELECTED_ID = to_id(go)
    await task_schedule(update_selection)

    gui_refresh("grid_editor_client_start")
    

    ->END


====== rebuild_grid_items =====
    #
    # Clear
    #

    so =  sim.get_space_object(artemis)
    so.data_tag = ship_type
    hm = sbs.get_hull_map(artemis, True)

    if grid_data.get(ship_type) is None:
        grid_data[ship_type] = {"grid_objects":[]}


    # first = list(grid_data.keys())[0]
    shared internal_items = grid_data[ship_type]["grid_objects"]
    shared current_grid_theme =  grid_theme_data[0]

    
    last_ship_type = ship_type



    # add back the grid items as they are now
    i = 0
    shared items = {}

    for g in internal_items:
        theme_data = get_theme_data(g, current_grid_theme)
        icon = theme_data.get("icon", 0)
        scale = theme_data.get("scale", 1.0)
        color = theme_data.get("color", 0)

        go =  grid_spawn(artemis,  g["name"], f"gol:{i}", g["x"], g["y"], icon, color, g["roles"])
        go.blob.set("icon_scale", scale, 0)
        items[go.id] = {"index": i, "go": go, "item": g}
        i+=1

    yield success


====== clear_grid_items =====

    # Delete all grid objects
    for k in items:
        #go = items[k]
        # delete by id
        sbs.delete_grid_object(artemis, k)

    yield success


=== update_selection ====

    blob = to_blob(artemis)
    blob.set("grid_selected_UID", COMMS_SELECTED_ID, 0)
    follow_route_select_grid(artemis, COMMS_SELECTED_ID)

    if selection_go is not None:
        # set pos
        blob = to_blob(COMMS_SELECTED_ID)
        x = blob.get("curx", 0)
        y = blob.get("cury", 0)
        selection_go.blob.set("curx", x)
        selection_go.blob.set("cury", y)
        pos_x = x
        pos_y = y
    else:
        #create it
        blob = to_blob(COMMS_SELECTED_ID)
        x = blob.get("curx", 0)
        y = blob.get("cury", 0)
        pos_x = x
        pos_y = y
        shared selection_go =  grid_spawn(artemis,  "selection", "#,sel1", x, y, 101, "#aaa4", "#")
        #print (selection_go)
        selection_go.blob.set("icon_scale",  1.5)

    yield success

    ->END

