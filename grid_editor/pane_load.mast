========== load_tools ============

    all = [{"mod": "Main Artemis data folder", "file": get_artemis_data_dir_filename("grid_data.json"), "theme": get_artemis_data_dir_filename("grid_theme.json")}]
    if get_mission_has_grid_data():
        all.append({"mod": "this mission", "file": get_mission_dir_filename("grid_data.json"), "theme": get_mission_dir_filename("grid_theme.json")})
    mods = get_mod_dirs_with_grid_data()
    for m in mods:
        mod = m.get("mod")
        file = m.get("file")
        theme = m.get("them")
        all.append({"mod":mod, "file":file, "theme": theme})

    all = dict_to_object(all)

    ts = "row-height: 1.5em;background:#1578;"
    with content:
        with gui_sub_section():
            gui_row("row-height:3em;")
            """{grid_data_file_name} is current open. Select a file and the press load to load new data"""
            gui_row()
            gd_picker = gui_list_box(all,"margin:1em,1em,1em,1em;row-height: 1em; background:#1572;", item_template=grid_data_files_item_template, title_template=grid_data_files_title_template, title_section_style= ts, select=True)
            gui_row("row-height:3em;")
            bb = gui_button("Load", style="margin:1em,0.1em,1em,0.5em;")
            on gui_message(bb):
                grid_data_file_ = gd_picker.get_value()
                if grid_data_file_ is not None:
                    grid_data_mod_name = grid_data_file_.mod
                    grid_data_file_name = grid_data_file_.file
                    grid_theme_file_name = grid_data_file_.theme
                    await task_schedule(load_data)
                    jump grid_editor_client_start


    jump finish_layout


===== load_data =====

    # Expect it to load, i.e. don't use previous data
    shared grid_data = load_json_data(grid_data_file_name)
    shared grid_theme_data = load_json_data(grid_theme_file_name)
    #
    # Save a Backup
    #
    yield fail if grid_data is None

    if grid_data_file_name.startswith("extra"):
        merge_mod_ship_data(grid_data_mod_name)
        reset_ship_data_caches()

    save_json_data(grid_data_file_name+".bak", grid_data)
    save_json_data(grid_theme_file_name+".bak", grid_theme_data)
    # Make a 'set' of templates, using key as the unique value
    shared templates = {}

    for ship in grid_data.values():
        gos = ship['grid_objects']
        for item in gos:
            ~~templates[item['name']] = item~~

    await task_schedule(rebuild_grid_items)


    yield success
