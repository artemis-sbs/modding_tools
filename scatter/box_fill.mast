
===== edit_scatter_rect_fill2 ===== 
box_rect = True
jump edit_scatter_box_rect_fill

===== edit_scatter_box_fill ===== 
box_rect = False
jump edit_scatter_box_rect_fill

===== edit_scatter_box_rect_fill ===== 


gui_section(style=form_style)

gui_row(input_row)

s_cw = "{cw}"
gui_input("desc: width count", var="s_cw")
if box_rect == False:
    s_ch = "{ch}"
    gui_input("desc: height count", var="s_ch")


s_cd = "{cd}"
gui_input("desc: depth count", var="s_cd")

gui_row(separator)
gui_blank()
gui_row(input_row)
s_x = "{x}"
gui_input("desc: x", var="s_x")

s_y = "{y}"
gui_input("desc: y", var="s_y")
s_z = "{z}"
gui_input("desc: z", var="s_z")
gui_row(input_row)

s_w = "{w}"
gui_input("desc: width", var="s_w")

if box_rect == False:
    s_h = "{h}"
    gui_input("desc: height", var="s_h")

s_d = "{d}"
gui_input("desc: depth", var="s_d")
gui_row(separator)
gui_blank()
gui_row(x_slider_row)
"""x rotation"""
gui_slider("low: 0; high:360.0;", var="ax")
gui_row(y_slider_row)
"""y rotation"""
gui_slider("low: 0; high:360.0;", var="ay")
gui_row(z_slider_row)
"""z rotation"""
gui_slider("low: 0; high:360.0;", var="az")


await gui():
    * "Apply":
        cw = int(s_cw)
        if box_rect==False:
            ch = int(s_ch)
        
        cd = int(s_cd)

        x = int(s_x)
        y = int(s_y)
        z = int(s_z)

        w = int(s_w)
        if box_rect==False:
            h = int(s_h)

        d = int(s_d)
        task_schedule(apply_box_fill)

jump scatter_client_common

==== apply_box_fill ====

await task_schedule(clear_objects)
if box_rect:
    scat = scatter_rect_fill(cw, cd, x, y, z, w, d, random=False) # ax,ay,az, True):
else:
    scat = scatter_box_fill(cw, ch, cd, x, y, z, w, h, d, random=False) # ax,ay,az, True):

await task_schedule(apply_scatter, data={"vecs": scat})

yield success

